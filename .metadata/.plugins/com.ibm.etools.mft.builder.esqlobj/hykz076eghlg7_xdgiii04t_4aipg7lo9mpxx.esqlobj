CREATE COMPUTE MODULE MapMQFailureToCommonEvent
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		
		DECLARE outputRootRef REFERENCE TO OutputRoot;
		DECLARE inputRootRef REFERENCE TO InputRoot;
        DECLARE inputMQMDRef REFERENCE TO InputRoot.MQMD;
        DECLARE inputPropRef REFERENCE TO InputRoot.Properties;
        -- Cannot create reference to InputRoot directly as it throws an exception.

        DECLARE envRef REFERENCE TO Environment;
        DECLARE excpListPath REFERENCE TO InputExceptionList.*[1];
        
        CALL StoreInputRoot(inputRootRef, envRef);
        CALL LoadProperties(envRef);
        
        SET Environment.Variables.QBE.ESBEvent.Event.Role = 'error';
        
        DECLARE eventRef REFERENCE TO Environment.Variables.QBE.ESBEvent.Event;
        
        CALL MapCommonInfoToCommonEvent(envRef, inputPropRef, outputRootRef);

        SET eventRef.EventSource.UserId VALUE             = inputMQMDRef.UserIdentifier;
		SET eventRef.MessageContext.MessageId             = inputMQMDRef.MsgId;
		SET eventRef.MessageContext.CorrelationId         = inputMQMDRef.CorrelId;
		SET eventRef.MessageContext.Destination.Transport = 'mq';	
		SET eventRef.MessageContext.Destination.Name      = inputMQMDRef.SourceQueue;
		SET eventRef.MessageContext.Destination.Type      = 'queue';
 		
 		CALL MapErrorToCommonEvent(envRef, excpListPath);

  	    /* Copy the message body if it exists. */
--		IF (CARDINALITY(InputBody.*[]) > 0) THEN
--			-- EVAL('SET ' || 'OutputRoot.' || FIELDNAME(InputBody) || ' = InputBody;');
--			CREATE LASTCHILD OF OutputRoot DOMAIN FIELDNAME (InputRoot.*[<]);
-- 			SET OutputRoot.*[<] = InputRoot.*[<];
            
--            SET eventRef.MessageContext.Payload = CAST(InputRoot.BLOB.BLOB AS CHAR CCSID InputRoot.MQMD.CodedCharSetId);
            
            -- SET OutputRoot.BLOB.BLOB = CAST(InputBody AS BLOB CCSID InputRoot.MQMD.CodedCharSetId ENCODING InputRoot.MQMD.Encoding);
--			
--			SET OutputRoot.Properties.MessageDomain = 'BLOB';
--		    SET OutputRoot.Properties.MessageFormat = 'BLOB';

--          SET OutputRoot.Properties.MessageDomain = 'BLOB';
--			SET OutputRoot."BLOB"."BLOB" = BITSTREAM(InputBody);
--			
--			DECLARE outMsg BLOB CAST(InputRoot.MRM AS BLOB CCSID InputRoot.Properties.CodedCharSetId); 
--			SET OutputRoot.Properties.CodedCharSetId = InputRoot.Properties.CodedCharSetId; 
--			SET OutputRoot.Properties.Encoding = InputRoot.Properties.Encoding; 
--			SET OutputRoot.BLOB.BLOB = outMsg;
--			
--			DECLARE yo BLOB ASBITSTREAM(InputRoot.MRM, InputRoot.Properties.Encoding, InputRoot.Properties.CodedCharSetId);
				
--		END IF;

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;