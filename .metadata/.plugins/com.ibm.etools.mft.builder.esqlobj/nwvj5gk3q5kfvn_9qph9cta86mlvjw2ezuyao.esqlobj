/*EATE FUNCTION Main() RETURNS BOOLE*/
	BEGIN

		CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		
		DECLARE outputRootRef REFERENCE TO OutputRoot;
		DECLARE inputRootRef REFERENCE TO InputRoot;
        DECLARE inputJMSHdrRef REFERENCE TO InputRoot.JMSTransport.Transport_Folders.Header_Values;
        DECLARE inputPropRef REFERENCE TO InputRoot.Properties;
        DECLARE inputBodyRef REFERENCE TO InputBody;
        DECLARE envRef REFERENCE TO Environment;
        DECLARE excpListPath REFERENCE TO InputExceptionList.*[1];
        
        -- CALL LoadProperties(envRef);
        
        CALL StoreInputRoot(inputRootRef, envRef);
        
        SET Environment.Variables.QBE.ESBEvent.Event.Role = 'error';
        
        DECLARE eventRef REFERENCE TO Environment.Variables.QBE.ESBEvent.Event;
        
        IF (envRef.Variables.CommonInfoMappedFlag <> TRUE) THEN
        	CALL MapCommonInfoToCommonEvent(envRef, inputPropRef, outputRootRef);
        END IF;
 		
        SET eventRef.EventSource.UserId VALUE             = InputRoot.JMSTransport.Transport_Folders.Standard_Properties.JMSXUserID; -- Gets set in flow specific esql
 		SET eventRef.MessageContext.MessageId             = inputJMSHdrRef.JMSMessageID;
		SET eventRef.MessageContext.CorrelationId         = inputJMSHdrRef.JMSCorrelationID;
		SET eventRef.MessageContext.Destination.Transport = 'jms';	
		SET eventRef.MessageContext.Destination.Name      = envRef.Variables.Properties.SourceDestination;
		SET eventRef.MessageContext.Destination.Type      = 'queue';
 		
 		CALL MapErrorToCommonEvent(envRef, excpListPath);

  	    /* Copy the message body if it exists. */
		IF (CARDINALITY(InputBody.*[]) > 0) THEN
			-- EVAL('SET ' || 'OutputRoot.' || FIELDNAME(InputBody) || ' = InputBody;');
			SET OutputRoot.{FIELDNAME(InputBody)} = InputBody;
		END IF;

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
