/*EATE FUNCTION Main() RETURNS BOOLE*/
	BEGIN
		
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		
		SET OutputRoot.Properties = InputRoot.Properties;
        CREATE LASTCHILD OF OutputRoot DOMAIN 'MQMD' NAME 'MQMD';
        SET OutputRoot.MQMD       = InputRoot.MQMD;
		
		
		DECLARE envRef REFERENCE TO Environment;

		/********************************************************
		 Set MQDLH header information
		*********************************************************/
		SET OutputRoot.MQMD.Format           = MQFMT_DEAD_LETTER_HEADER;		
		SET OutputRoot.MQDLH.StrucId 		 = MQDLH_STRUC_ID;
		SET OutputRoot.MQDLH.Version 		 = MQDLH_VERSION_1;
		SET OutputRoot.MQDLH.Reason 		 = 0;
		SET OutputRoot.MQDLH.DestQName 		 = InputRoot.MQMD.SourceQueue;
		SET OutputRoot.MQDLH.DestQMgrName 	 = InputRoot.MQMD.ReplyToQMgr;
		SET OutputRoot.MQDLH.Encoding 		 = InputRoot.MQMD.Encoding;
		SET OutputRoot.MQDLH.CodedCharSetId  = InputRoot.MQMD.CodedCharSetId;
		SET OutputRoot.MQDLH.Format          = 'MQRFH2  ';
		SET OutputRoot.MQDLH.PutApplType 	 = InputRoot.MQMD.PutApplType;
		SET OutputRoot.MQDLH.PutApplName 	 = InputRoot.MQMD.PutApplName;
		SET OutputRoot.MQDLH.PutDate 		 = InputRoot.MQMD.PutDate;
		SET OutputRoot.MQDLH.PutTime 		 = InputRoot.MQMD.PutTime;
		SET OutputRoot.MQMD.ApplIdentityData = 'SET APPLIDENTITYDATA';
		

 		/*************************************************************************************
         Preserve the content of RFH2 header if exists in the incoming message
         otherwise, we bring across the MQMD.format to newly created MQRFH2.format
        ***************************************************************************************/
        IF InputRoot.MQRFH2 IS NOT NULL THEN
	       SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
        ELSE
	       SET OutputRoot.MQRFH2.(MQRFH2.Field)Format = InputRoot.MQMD.Format;
        END IF;

        /* Populate MQRFH2 for additional information */
        SET OutputRoot.MQRFH2.ESBEvent = envRef.Variables.QBE.ESBEvent;
 	 	
 	 	DECLARE cursor REFERENCE TO InputBody;
 	 	
 	 	IF LASTMOVE(cursor) = TRUE THEN
 	 	  -- EVAL('SET ' || 'OutputRoot.' || FIELDNAME(InputBody) || ' = InputBody;');
 	 	  SET OutputRoot.{FIELDNAME(InputBody)} = InputBody;
 	 	END IF;

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
