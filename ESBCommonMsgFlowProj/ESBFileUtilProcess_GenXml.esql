CREATE COMPUTE MODULE ESBFileUtilProcess_GenXml
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		/*CALL CopyMessageHeaders();*/

		DECLARE in_Operation CHAR;
		DECLARE in_TrackingId CHAR;
		DECLARE in_Directory CHAR;
		DECLARE in_FileName CHAR;
		DECLARE in_FileContent CHAR;
		/*DECLARE inout_FileUtilXml REFERENCE TO OutputRoot;		
		SET in_Operation = Environment.Variables.Operation;
		SET in_TrackingId = Environment.Variables.TrackingId;
		SET in_Directory = Environment.Variables.Directory;
		SET in_FileName = Environment.Variables.FileName;
		SET in_FileContent = Environment.Variables.FileContent;*/
		
		DECLARE inout_FileUtilXml REFERENCE TO OutputRoot;
		DECLARE InputRoot_FileUtilRef REFERENCE TO InputRoot.XMLNSC.FileUtil;
		
		SET in_Operation = InputRoot_FileUtilRef.Operation;
		SET in_TrackingId = InputRoot_FileUtilRef.TrackingId;
		SET in_Directory = InputRoot_FileUtilRef.Directory;
		SET in_FileName = InputRoot_FileUtilRef.FileName;
		SET in_FileContent = InputRoot_FileUtilRef.FileContent;

		CAll FileUtilGenXml(in_Operation, in_TrackingId, in_Directory, in_FileName, in_FileContent, inout_FileUtilXml);
		
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
